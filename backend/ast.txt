Module(
    body=[
        Import(
            names=[
                alias(name='math')]),
        ImportFrom(
            module='os',
            names=[
                alias(name='path')],
            level=0),
        Assign(
            targets=[
                Name(id='PI', ctx=Store())],
            value=Constant(value=3.1415)),
        Assign(
            targets=[
                Name(id='E', ctx=Store())],
            value=Attribute(
                value=Name(id='math', ctx=Load()),
                attr='e',
                ctx=Load())),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=5)),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=UnaryOp(
                op=USub(),
                operand=Name(id='x', ctx=Load()))),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=BinOp(
                        left=Name(id='y', ctx=Load()),
                        op=Mult(),
                        right=Constant(value=2))),
                op=Sub(),
                right=BinOp(
                    left=BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=FloorDiv(),
                        right=Constant(value=2)),
                    op=Mod(),
                    right=BinOp(
                        left=Constant(value=3),
                        op=Pow(),
                        right=Constant(value=2))))),
        Assign(
            targets=[
                Name(id='w', ctx=Store())],
            value=BinOp(
                left=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=BitAnd(),
                    right=Constant(value=3)),
                op=BitOr(),
                right=BinOp(
                    left=Constant(value=2),
                    op=BitXor(),
                    right=Constant(value=1)))),
        Assign(
            targets=[
                Name(id='flag', ctx=Store())],
            value=BoolOp(
                op=And(),
                values=[
                    UnaryOp(
                        op=Not(),
                        operand=Compare(
                            left=Name(id='x', ctx=Load()),
                            ops=[
                                Gt()],
                            comparators=[
                                Constant(value=0)])),
                    UnaryOp(
                        op=Invert(),
                        operand=Name(id='x', ctx=Load()))])),
        Assign(
            targets=[
                Name(id='a', ctx=Store())],
            value=Constant(value=10)),
        Assign(
            targets=[
                Name(id='b', ctx=Store())],
            value=Constant(value=20)),
        Assign(
            targets=[
                Name(id='is_equal', ctx=Store())],
            value=Compare(
                left=Name(id='a', ctx=Load()),
                ops=[
                    Eq()],
                comparators=[
                    Name(id='b', ctx=Load())])),
        Assign(
            targets=[
                Name(id='is_not_equal', ctx=Store())],
            value=Compare(
                left=Name(id='a', ctx=Load()),
                ops=[
                    NotEq()],
                comparators=[
                    Name(id='b', ctx=Load())])),
        Assign(
            targets=[
                Name(id='is_greater', ctx=Store())],
            value=Compare(
                left=Name(id='a', ctx=Load()),
                ops=[
                    Gt()],
                comparators=[
                    Name(id='b', ctx=Load())])),
        Assign(
            targets=[
                Name(id='is_smaller_or_equal', ctx=Store())],
            value=Compare(
                left=Name(id='a', ctx=Load()),
                ops=[
                    LtE()],
                comparators=[
                    Name(id='b', ctx=Load())])),
        Assign(
            targets=[
                Name(id='status', ctx=Store())],
            value=IfExp(
                test=Name(id='is_equal', ctx=Load()),
                body=Constant(value='OK'),
                orelse=Constant(value='FAIL'))),
        FunctionDef(
            name='power',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='base'),
                    arg(arg='exponent')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Return(
                    value=BinOp(
                        left=Name(id='base', ctx=Load()),
                        op=Pow(),
                        right=Name(id='exponent', ctx=Load())))],
            decorator_list=[],
            type_params=[]),
        FunctionDef(
            name='outer',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='val')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                FunctionDef(
                    name='inner',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='x')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=BinOp(
                                left=Name(id='x', ctx=Load()),
                                op=Mult(),
                                right=Name(id='x', ctx=Load())))],
                    decorator_list=[],
                    type_params=[]),
                Return(
                    value=Call(
                        func=Name(id='inner', ctx=Load()),
                        args=[
                            Name(id='val', ctx=Load())],
                        keywords=[]))],
            decorator_list=[],
            type_params=[]),
        If(
            test=Compare(
                left=Name(id='a', ctx=Load()),
                ops=[
                    Gt()],
                comparators=[
                    Name(id='b', ctx=Load())]),
            body=[
                Assign(
                    targets=[
                        Name(id='result', ctx=Store())],
                    value=Constant(value='a is greater'))],
            orelse=[
                If(
                    test=Compare(
                        left=Name(id='a', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Name(id='b', ctx=Load())]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='result', ctx=Store())],
                            value=Constant(value='a equals b'))],
                    orelse=[
                        Assign(
                            targets=[
                                Name(id='result', ctx=Store())],
                            value=Constant(value='a is smaller'))])]),
        Assign(
            targets=[
                Name(id='count', ctx=Store())],
            value=Constant(value=0)),
        While(
            test=Compare(
                left=Name(id='count', ctx=Load()),
                ops=[
                    Lt()],
                comparators=[
                    Constant(value=3)]),
            body=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            JoinedStr(
                                values=[
                                    Constant(value='count: '),
                                    FormattedValue(
                                        value=Name(id='count', ctx=Load()),
                                        conversion=-1)])],
                        keywords=[])),
                AugAssign(
                    target=Name(id='count', ctx=Store()),
                    op=Add(),
                    value=Constant(value=1)),
                If(
                    test=Compare(
                        left=Name(id='count', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=2)]),
                    body=[
                        Continue()],
                    orelse=[
                        If(
                            test=Compare(
                                left=Name(id='count', ctx=Load()),
                                ops=[
                                    Gt()],
                                comparators=[
                                    Constant(value=2)]),
                            body=[
                                Break()],
                            orelse=[])])],
            orelse=[]),
        For(
            target=Name(id='i', ctx=Store()),
            iter=Call(
                func=Name(id='range', ctx=Load()),
                args=[
                    Constant(value=3)],
                keywords=[]),
            body=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            JoinedStr(
                                values=[
                                    Constant(value='For loop iteration '),
                                    FormattedValue(
                                        value=Name(id='i', ctx=Load()),
                                        conversion=-1)])],
                        keywords=[]))],
            orelse=[]),
        Assign(
            targets=[
                Name(id='nums', ctx=Store())],
            value=List(
                elts=[
                    Constant(value=1),
                    Constant(value=2),
                    Constant(value=3),
                    Constant(value=4)],
                ctx=Load())),
        Assign(
            targets=[
                Name(id='names', ctx=Store())],
            value=Tuple(
                elts=[
                    Constant(value='Alice'),
                    Constant(value='Bob'),
                    Constant(value='Charlie')],
                ctx=Load())),
        Assign(
            targets=[
                Name(id='mapping', ctx=Store())],
            value=Dict(
                keys=[
                    Constant(value='x'),
                    Constant(value='y')],
                values=[
                    Constant(value=1),
                    Constant(value=2)])),
        Assign(
            targets=[
                Name(id='second', ctx=Store())],
            value=Subscript(
                value=Name(id='nums', ctx=Load()),
                slice=Constant(value=1),
                ctx=Load())),
        Assign(
            targets=[
                Name(id='sliced', ctx=Store())],
            value=Subscript(
                value=Name(id='nums', ctx=Load()),
                slice=Slice(
                    lower=Constant(value=1),
                    upper=Constant(value=3)),
                ctx=Load())),
        Assign(
            targets=[
                Name(id='s', ctx=Store())],
            value=Call(
                func=Name(id='str', ctx=Load()),
                args=[
                    Name(id='a', ctx=Load())],
                keywords=[])),
        Assign(
            targets=[
                Name(id='i', ctx=Store())],
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Constant(value='42')],
                keywords=[])),
        Assign(
            targets=[
                Name(id='b', ctx=Store())],
            value=Call(
                func=Name(id='bool', ctx=Load()),
                args=[
                    Constant(value=1)],
                keywords=[])),
        FunctionDef(
            name='empty',
            args=arguments(
                posonlyargs=[],
                args=[],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Pass()],
            decorator_list=[],
            type_params=[]),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    JoinedStr(
                        values=[
                            Constant(value='x: '),
                            FormattedValue(
                                value=Name(id='x', ctx=Load()),
                                conversion=-1),
                            Constant(value=', y: '),
                            FormattedValue(
                                value=Name(id='y', ctx=Load()),
                                conversion=-1),
                            Constant(value=', z: '),
                            FormattedValue(
                                value=Name(id='z', ctx=Load()),
                                conversion=-1),
                            Constant(value=', w: '),
                            FormattedValue(
                                value=Name(id='w', ctx=Load()),
                                conversion=-1),
                            Constant(value=', flag: '),
                            FormattedValue(
                                value=Name(id='flag', ctx=Load()),
                                conversion=-1)])],
                keywords=[])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    JoinedStr(
                        values=[
                            Constant(value='Comparisons: == '),
                            FormattedValue(
                                value=Name(id='is_equal', ctx=Load()),
                                conversion=-1),
                            Constant(value=', != '),
                            FormattedValue(
                                value=Name(id='is_not_equal', ctx=Load()),
                                conversion=-1)])],
                keywords=[])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    JoinedStr(
                        values=[
                            Constant(value='Result: '),
                            FormattedValue(
                                value=Name(id='result', ctx=Load()),
                                conversion=-1),
                            Constant(value=', Status: '),
                            FormattedValue(
                                value=Name(id='status', ctx=Load()),
                                conversion=-1)])],
                keywords=[])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    JoinedStr(
                        values=[
                            Constant(value='Power: '),
                            FormattedValue(
                                value=Call(
                                    func=Name(id='power', ctx=Load()),
                                    args=[
                                        Constant(value=2),
                                        Constant(value=3)],
                                    keywords=[]),
                                conversion=-1),
                            Constant(value=', Outer: '),
                            FormattedValue(
                                value=Call(
                                    func=Name(id='outer', ctx=Load()),
                                    args=[
                                        Constant(value=4)],
                                    keywords=[]),
                                conversion=-1)])],
                keywords=[])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    JoinedStr(
                        values=[
                            Constant(value='Names: '),
                            FormattedValue(
                                value=Name(id='names', ctx=Load()),
                                conversion=-1),
                            Constant(value=', Mapping: '),
                            FormattedValue(
                                value=Name(id='mapping', ctx=Load()),
                                conversion=-1)])],
                keywords=[])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    JoinedStr(
                        values=[
                            Constant(value='Second: '),
                            FormattedValue(
                                value=Name(id='second', ctx=Load()),
                                conversion=-1),
                            Constant(value=', Slice: '),
                            FormattedValue(
                                value=Name(id='sliced', ctx=Load()),
                                conversion=-1)])],
                keywords=[]))],
    type_ignores=[])